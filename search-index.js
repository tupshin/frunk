var searchIndex = {};
searchIndex["frunk"] = {"doc":"Frunk: generic functional programming toolbelt for Rust","items":[[0,"semigroup","frunk","Module for holding the Semigroup typeclass definition and typeclass instances",null,null],[3,"Max","frunk::semigroup","Wrapper type for types that are ordered and can have a Max combination",null,null],[12,"0","","",0,null],[3,"Min","","Wrapper type for types that are ordered and can have a Min combination",null,null],[12,"0","","",1,null],[3,"Product","","Wrapper type for types that can have a Product combination",null,null],[12,"0","","",2,null],[3,"All","","Wrapper type for boolean that acts as a bitwise && combination",null,null],[12,"0","","",3,null],[3,"Any","","Wrapper type for boolean that acts as a bitwise || combination",null,null],[12,"0","","",4,null],[5,"combine_n","","Return this combined with itself `n` times.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"combine_all_option","","Given a sequence of `xs`, combine them and return the total",null,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[8,"Semigroup","","A Semigroup is a class of thing that has a definable combine operation",null,null],[10,"combine","","Associative operation taking which combines two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"max"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"min"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"all"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"ordering"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"monoid","frunk","Module for holding Monoid typeclass definitions and default implementations",null,null],[5,"combine_n","frunk::monoid","Return this combined with itself `n` times.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"combine_all","","Given a sequence of `xs`, combine them and return the total",null,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[8,"Monoid","","A Monoid is a Sempigroup that has an empty/ zero value",null,null],[10,"empty","","For a given Monoid, returns its empty/zero value",6,{"inputs":[],"output":{"name":"self"}}],[11,"empty","frunk::semigroup","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[0,"hlist","frunk","Module that holds HList data structures and implementations",null,null],[3,"HNil","frunk::hlist","Represents the right-most end of a heterogeneous list",null,null],[3,"HCons","","Represents the most basic non-empty HList. Its value is held in `head` while its tail is another HList.",null,null],[12,"head","","",7,null],[12,"tail","","",7,null],[3,"Here","","Largely lifted from https://github.com/Sgeo/hlist/blob/master/src/lib.rs#L30 Used as an index into an `HList`.",null,null],[3,"There","","Used as an index into an `HList`.",null,null],[5,"h_cons","","Takes an element and an Hlist and returns another one with the element prepended to the original list. The original list is consumed",null,{"inputs":[{"name":"h"},{"name":"t"}],"output":{"name":"hcons"}}],[8,"HList","","Typeclass for HList-y behaviour",null,null],[10,"length","","Returns the length of a given HList",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"prepend","","Prepends an item to the current HList",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"hcons"}}],[8,"Selector","","Trait for retrieving an HList element by type",null,null],[10,"get","","Allows you to retrieve a unique type from an HList",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[8,"IntoTuple2","","Trait for things that can be turned into a Tuple 2 (pair)",null,null],[16,"HeadType","","The 0 element in the output tuple",10,null],[16,"TailOutput","","The 1 element in the output tuple",10,null],[10,"into_tuple2","","Turns an HList into nested Tuple2s, which are less troublesome to pattern match and have a nicer type signature.",10,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"hnil"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"ordering"}}],[11,"length","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hcons"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"ordering"}}],[11,"length","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pop","","Returns the head of the list and the tail of the list as a tuple2. The original list is consumed",7,null],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"rhs"}}],[11,"add","","",7,null],[11,"get","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fromtail"}}],[11,"into_tuple2","","",7,null],[11,"into_tuple2","","",7,null],[0,"validated","frunk","Module for holding Validated logic",null,null],[4,"Validated","frunk::validated","A Validated is either an Ok holding an HList or an Err, holding a vector of collected errors.",null,null],[13,"Ok","","",12,null],[13,"Err","","",12,null],[8,"IntoValidated","","Trait for \"lifting\" a given type into a Validated",null,null],[10,"into_validated","","Consumes the current Result into a Validated so that we can begin chaining",13,{"inputs":[{"name":"self"}],"output":{"name":"validated"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"validated"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"ordering"}}],[11,"is_ok","","Returns true if this validation is Ok, false otherwise",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if this validation is Err, false otherwise",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_result","","Turns this Validated into a Result.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","",12,null],[11,"add","","",12,null],[14,"hlist","frunk","Returns an `HList` based on the values passed in.",null,null],[14,"hlist_pat","","Macro for pattern-matching on HLists.",null,null],[14,"Hlist","","Returns a type signature for an HList of the provided types",null,null]],"paths":[[3,"Max"],[3,"Min"],[3,"Product"],[3,"All"],[3,"Any"],[8,"Semigroup"],[8,"Monoid"],[3,"HCons"],[8,"HList"],[8,"Selector"],[8,"IntoTuple2"],[3,"HNil"],[4,"Validated"],[8,"IntoValidated"]]};
initSearch(searchIndex);
